/**
 * ContributionReviewModal.tsx - 기여 검토 모달 컴포넌트
 * Phase 5 구현: 기존과 제안된 시간표 병렬 비교 및 승인/거부
 */

import React, { useState, useEffect, useMemo } from 'react';
import { doc, getDoc } from 'firebase/firestore';
import { db } from '../../services/firebase';
import { useAuth } from '../../context/AuthContext';
import { backendService } from '../../services/backendService';
import './ContributionReviewModal.css';

interface TimeSlot {
  id: string;
  startTime: string;
  endTime: string;
  subject: string;
  type: 'class' | 'self_study' | 'external';
  isAutoGenerated: boolean;
  color?: string;
  teacher?: string;
  location?: string;
  notes?: string;
}

interface ContributionData {
  id: string;
  contributionType: string;
  status: string;
  studentId: string;
  originalTimetableId: string;
  submittedAt: any;
  submissionNotes?: string;
  proposedTimetable: {
    detailedSchedule: {
      [dayOfWeek: string]: {
        timeSlots: TimeSlot[];
      };
    };
    basicSchedule?: {
      dailySchedules: {
        [dayOfWeek: string]: {
          arrivalTime: string;
          departureTime: string;
          isActive: boolean;
        };
      };
      timeSlotInterval: number;
    };
    modifiedSlots: string[];
    addedSlots: TimeSlot[];
    deletedSlots: string[];
    basicScheduleChanges?: {
      dailyScheduleChanges: {
        [dayOfWeek: string]: {
          arrivalTimeChanged: boolean;
          departureTimeChanged: boolean;
          isActiveChanged: boolean;
          originalSchedule: {
            arrivalTime: string;
            departureTime: string;
            isActive: boolean;
          };
          updatedSchedule: {
            arrivalTime: string;
            departureTime: string;
            isActive: boolean;
          };
        };
      };
      timeSlotIntervalChanged: boolean;
      originalTimeSlotInterval: number;
      updatedTimeSlotInterval: number;
    };
  };
  metadata?: {
    studentName?: string;
    timetableName?: string;
  };
}

interface OriginalTimetableData {
  id: string;
  name: string;
  studentName: string;
  detailedSchedule: {
    [dayOfWeek: string]: {
      timeSlots: TimeSlot[];
    };
  };
  basicSchedule?: {
    dailySchedules: {
      [dayOfWeek: string]: {
        arrivalTime: string;
        departureTime: string;
        isActive: boolean;
      };
    };
    timeSlotInterval: number;
  };
}

// 거부 사유 템플릿
const rejectionReasonTemplates = [
  { id: 'time_conflict', text: '시간 중복이 발생했습니다.' },
  { id: 'missing_required', text: '필수 과목이 누락되었습니다.' },
  { id: 'invalid_schedule', text: '시간표 구성이 부적절합니다.' },
  { id: 'policy_violation', text: '학습 정책에 위반됩니다.' },
  { id: 'capacity_exceeded', text: '수용 인원을 초과했습니다.' },
  { id: 'time_restrictions', text: '시간대 제한에 위반됩니다.' },
  { id: 'custom', text: '직접 입력...' }
];

const daysOfWeek = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];
const dayNames: { [key: string]: string } = {
  monday: '월',
  tuesday: '화',
  wednesday: '수',
  thursday: '목',
  friday: '금',
  saturday: '토',
  sunday: '일'
};

interface ContributionReviewModalProps {
  isOpen: boolean;
  contributionId: string | null;
  onClose: () => void;
  onComplete: (action: 'approve' | 'reject', contributionId: string) => void;
}

export const ContributionReviewModal: React.FC<ContributionReviewModalProps> = ({
  isOpen,
  contributionId,
  onClose,
  onComplete
}) => {
  const { userProfile } = useAuth();
  const [loading, setLoading] = useState(false);
  const [contribution, setContribution] = useState<ContributionData | null>(null);
  const [originalTimetable, setOriginalTimetable] = useState<OriginalTimetableData | null>(null);
  const [selectedAction, setSelectedAction] = useState<'approve' | 'reject' | null>(null);
  const [rejectionReason, setRejectionReason] = useState('');
  const [customRejectionReason, setCustomRejectionReason] = useState('');
  const [selectedTemplate, setSelectedTemplate] = useState('');
  const [processing, setProcessing] = useState(false);

  useEffect(() => {
    if (isOpen && contributionId && userProfile?.uid) {
      loadContributionData();
    }
  }, [isOpen, contributionId, userProfile?.uid]);

  const loadContributionData = async () => {
    // 필수 파라미터 검증
    if (!contributionId || !userProfile?.uid) {
      console.error('필수 파라미터가 누락되었습니다:', { 
        contributionId, 
        uid: userProfile?.uid 
      });
      return;
    }

    setLoading(true);
    try {
      // 기여 데이터 조회
      const contributionRef = doc(db, `users/${userProfile.uid}/schedule_contributions/${contributionId}`);
      const contributionDoc = await getDoc(contributionRef);

      if (contributionDoc.exists()) {
        const contributionData = { id: contributionDoc.id, ...contributionDoc.data() } as ContributionData;
        setContribution(contributionData);

        // 원본 시간표 데이터 조회
        if (contributionData.originalTimetableId) {
          const originalRef = doc(db, `users/${userProfile.uid}/student_timetables/${contributionData.originalTimetableId}`);
          const originalDoc = await getDoc(originalRef);

          if (originalDoc.exists()) {
            const originalData = { id: originalDoc.id, ...originalDoc.data() } as OriginalTimetableData;
            setOriginalTimetable(originalData);
          } else {
            console.warn('원본 시간표를 찾을 수 없습니다:', contributionData.originalTimetableId);
          }
        } else {
          console.warn('originalTimetableId가 없습니다:', contributionData);
        }
      } else {
        console.error('기여 데이터를 찾을 수 없습니다:', contributionId);
        alert('요청하신 기여 데이터를 찾을 수 없습니다. 페이지를 새로고침해주세요.');
      }
    } catch (error) {
      console.error('기여 데이터 조회 오류:', error);
      alert('데이터를 불러오는 중 오류가 발생했습니다. 잠시 후 다시 시도해주세요.');
    } finally {
      setLoading(false);
    }
  };

  // 변경사항 분석
  const changeAnalysis = useMemo(() => {
    if (!contribution || !originalTimetable) return null;

    const analysis: {
      [dayOfWeek: string]: {
        added: TimeSlot[];
        modified: { original: TimeSlot; proposed: TimeSlot }[];
        deleted: TimeSlot[];
      };
    } = {};

    daysOfWeek.forEach(day => {
      const originalSlots = originalTimetable.detailedSchedule[day]?.timeSlots || [];
      const proposedSlots = contribution.proposedTimetable.detailedSchedule[day]?.timeSlots || [];

      analysis[day] = {
        added: [],
        modified: [],
        deleted: []
      };

      // 추가된 슬롯들
      contribution.proposedTimetable.addedSlots.forEach(slot => {
        if (proposedSlots.find(s => s.id === slot.id)) {
          analysis[day].added.push(slot);
        }
      });

      // 수정된 슬롯들
      contribution.proposedTimetable.modifiedSlots.forEach(slotId => {
        const originalSlot = originalSlots.find(s => s.id === slotId);
        const proposedSlot = proposedSlots.find(s => s.id === slotId);
        if (originalSlot && proposedSlot) {
          analysis[day].modified.push({ original: originalSlot, proposed: proposedSlot });
        }
      });

      // 삭제된 슬롯들
      contribution.proposedTimetable.deletedSlots.forEach(slotId => {
        const deletedSlot = originalSlots.find(s => s.id === slotId);
        if (deletedSlot) {
          analysis[day].deleted.push(deletedSlot);
        }
      });
    });

    return analysis;
  }, [contribution, originalTimetable]);

  // 기본 스케줄 변경사항 렌더링 함수
  const renderBasicScheduleChanges = () => {
    if (!contribution?.proposedTimetable.basicScheduleChanges) return null;
    
    const { dailyScheduleChanges, timeSlotIntervalChanged, originalTimeSlotInterval, updatedTimeSlotInterval } = contribution.proposedTimetable.basicScheduleChanges;
    
    // 요일 이름 매핑 (실제 프로젝트 구조 반영)
    const dayNames: { [key: string]: string } = {
      monday: '월요일',
      tuesday: '화요일',
      wednesday: '수요일',
      thursday: '목요일',
      friday: '금요일',
      saturday: '토요일',
      sunday: '일요일'
    };
    
    return (
      <div className="crm-basic-schedule-changes">
        <h3>등원/하원 시간 변경사항</h3>
        
        {/* 시간 간격 변경 */}
        {timeSlotIntervalChanged && (
          <div className="crm-interval-change">
            <h4>시간 간격</h4>
            <div className="crm-change-comparison">
              <div className="crm-change-item">
                <span className="crm-change-label">기존:</span>
                <span className="crm-change-value">{originalTimeSlotInterval}분</span>
              </div>
              <div className="crm-change-arrow">→</div>
              <div className="crm-change-item">
                <span className="crm-change-label">변경:</span>
                <span className="crm-change-value">{updatedTimeSlotInterval}분</span>
              </div>
            </div>
          </div>
        )}
        
        {/* 요일별 변경사항 */}
        <div className="crm-daily-schedule-changes">
          {Object.entries(dailyScheduleChanges || {}).map(([day, dayChanges]) => (
            <div key={day} className="crm-day-schedule-change">
              <h4>{dayNames[day]}</h4>
              <div className="crm-change-comparison">
                <div className="crm-change-column">
                  <h5>기존</h5>
                  <div className="crm-schedule-info">
                    <div className="crm-schedule-item">
                      <span className="crm-schedule-label">등원:</span>
                      <span className="crm-schedule-value">{dayChanges.originalSchedule.arrivalTime}</span>
                    </div>
                    <div className="crm-schedule-item">
                      <span className="crm-schedule-label">하원:</span>
                      <span className="crm-schedule-value">{dayChanges.originalSchedule.departureTime}</span>
                    </div>
                    <div className="crm-schedule-item">
                      <span className="crm-schedule-label">활성:</span>
                      <span className="crm-schedule-value">{dayChanges.originalSchedule.isActive ? '예' : '아니오'}</span>
                    </div>
                  </div>
                </div>
                <div className="crm-change-arrow">→</div>
                <div className="crm-change-column">
                  <h5>변경 후</h5>
                  <div className="crm-schedule-info">
                    <div className="crm-schedule-item">
                      <span className="crm-schedule-label">등원:</span>
                      <span className={`crm-schedule-value ${dayChanges.arrivalTimeChanged ? 'changed' : ''}`}>
                        {dayChanges.updatedSchedule.arrivalTime}
                      </span>
                    </div>
                    <div className="crm-schedule-item">
                      <span className="crm-schedule-label">하원:</span>
                      <span className={`crm-schedule-value ${dayChanges.departureTimeChanged ? 'changed' : ''}`}>
                        {dayChanges.updatedSchedule.departureTime}
                      </span>
                    </div>
                    <div className="crm-schedule-item">
                      <span className="crm-schedule-label">활성:</span>
                      <span className={`crm-schedule-value ${dayChanges.isActiveChanged ? 'changed' : ''}`}>
                        {dayChanges.updatedSchedule.isActive ? '예' : '아니오'}
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    );
  };

  const handleTemplateSelect = (templateId: string) => {
    setSelectedTemplate(templateId);
    if (templateId === 'custom') {
      setRejectionReason(customRejectionReason);
    } else {
      const template = rejectionReasonTemplates.find(t => t.id === templateId);
      setRejectionReason(template?.text || '');
    }
  };

  const handleCustomReasonChange = (value: string) => {
    setCustomRejectionReason(value);
    if (selectedTemplate === 'custom') {
      setRejectionReason(value);
    }
  };

  const handleSubmit = async () => {
    // 필수 데이터 검증 강화
    if (!contribution || !contribution.id || !selectedAction) {
      console.error('필수 데이터가 누락되었습니다:', { 
        contribution: !!contribution, 
        contributionId: contribution?.id, 
        selectedAction 
      });
      alert('데이터를 불러오는 중입니다. 잠시 후 다시 시도해주세요.');
      return;
    }

    if (selectedAction === 'reject' && !rejectionReason.trim()) {
      alert('거부 사유를 입력해주세요.');
      return;
    }

    setProcessing(true);
    try {
      const result = await backendService.processContribution({
        contributionId: contribution.id,
        action: selectedAction,
        rejectionReason: selectedAction === 'reject' ? rejectionReason : undefined
      });

      if (result.success) {
        onComplete(selectedAction, contribution.id);
        onClose();
      } else {
        alert(result.message || '처리 중 오류가 발생했습니다.');
      }
    } catch (error) {
      console.error('기여 처리 오류:', error);
      alert('처리 중 오류가 발생했습니다.');
    } finally {
      setProcessing(false);
    }
  };

  const getSlotDisplayTime = (slot: TimeSlot) => {
    return `${slot.startTime} - ${slot.endTime}`;
  };

  const getSlotTypeText = (type: string) => {
    switch (type) {
      case 'class': return '수업';
      case 'self_study': return '자습';
      case 'external': return '외부';
      default: return type;
    }
  };

  if (!isOpen) return null;

  return (
    <div className="crm-overlay">
      <div className="crm-container">
        {/* 헤더 */}
        <div className="crm-header">
          <div className="crm-header-info">
            <h2>시간표 편집 검토</h2>
            {contribution && (
              <div className="crm-contribution-meta">
                <span className="crm-student-name">
                  {contribution.metadata?.studentName || '학생'}
                </span>
                <span className="crm-timetable-name">
                  {contribution.metadata?.timetableName || '시간표'}
                </span>
                <span className="crm-submitted-at">
                  {contribution.submittedAt?.toDate().toLocaleString('ko-KR')}
                </span>
              </div>
            )}
          </div>
          <button className="crm-close-btn" onClick={onClose} disabled={processing}>
            ✕
          </button>
        </div>

        {/* 컨텐츠 */}
        <div className="crm-content">
          {loading ? (
            <div className="crm-loading">
              <div className="crm-spinner"></div>
              <p>데이터를 불러오는 중...</p>
            </div>
          ) : !contribution || !originalTimetable ? (
            <div className="crm-error">
              <p>데이터를 찾을 수 없습니다.</p>
            </div>
          ) : (
            <>
              {/* 제출 메모 */}
              {contribution.submissionNotes && (
                <div className="crm-submission-notes">
                  <h3>제출 메모</h3>
                  <p>{contribution.submissionNotes}</p>
                </div>
              )}

              {/* 변경사항 요약 */}
              <div className="crm-changes-summary">
                <h3>변경사항 요약</h3>
                <div className="crm-changes-stats">
                  <span className="crm-stat added">
                    추가: {contribution.proposedTimetable.addedSlots.length}개
                  </span>
                  <span className="crm-stat modified">
                    수정: {contribution.proposedTimetable.modifiedSlots.length}개
                  </span>
                  <span className="crm-stat deleted">
                    삭제: {contribution.proposedTimetable.deletedSlots.length}개
                  </span>
                </div>
              </div>

              {/* 기본 스케줄 변경사항 표시 */}
              {renderBasicScheduleChanges()}
              
              {/* 시간표 비교 */}
              <div className="crm-comparison">
                <h3>시간표 비교</h3>
                <div className="crm-timetable-comparison">
                  {daysOfWeek.map(day => {
                    const originalSlots = originalTimetable.detailedSchedule[day]?.timeSlots || [];
                    const proposedSlots = contribution.proposedTimetable.detailedSchedule[day]?.timeSlots || [];
                    const dayChanges = changeAnalysis?.[day];

                    if (originalSlots.length === 0 && proposedSlots.length === 0) {
                      return null;
                    }

                    return (
                      <div key={day} className="crm-day-comparison">
                        <div className="crm-day-header">
                          <h4>{dayNames[day]}요일</h4>
                          {dayChanges && (
                            <div className="crm-day-changes">
                              {dayChanges.added.length > 0 && (
                                <span className="crm-change-count added">+{dayChanges.added.length}</span>
                              )}
                              {dayChanges.modified.length > 0 && (
                                <span className="crm-change-count modified">~{dayChanges.modified.length}</span>
                              )}
                              {dayChanges.deleted.length > 0 && (
                                <span className="crm-change-count deleted">-{dayChanges.deleted.length}</span>
                              )}
                            </div>
                          )}
                        </div>

                        <div className="crm-day-slots">
                          <div className="crm-slots-column">
                            <h5>기존</h5>
                            <div className="crm-slots-list">
                              {originalSlots.map(slot => (
                                <div
                                  key={slot.id}
                                  className={`crm-slot original ${
                                    contribution.proposedTimetable.deletedSlots.includes(slot.id) ? 'deleted' :
                                    contribution.proposedTimetable.modifiedSlots.includes(slot.id) ? 'modified' : ''
                                  }`}
                                >
                                  <div className="crm-slot-time">{getSlotDisplayTime(slot)}</div>
                                  {slot.type !== 'self_study' && (
                                    <div className="crm-slot-subject">{slot.subject}</div>
                                  )}
                                  <div className="crm-slot-type">{getSlotTypeText(slot.type)}</div>
                                </div>
                              ))}
                            </div>
                          </div>

                          <div className="crm-slots-column">
                            <h5>제안됨</h5>
                            <div className="crm-slots-list">
                              {proposedSlots.map(slot => (
                                <div
                                  key={slot.id}
                                  className={`crm-slot proposed ${
                                    contribution.proposedTimetable.addedSlots.find(s => s.id === slot.id) ? 'added' :
                                    contribution.proposedTimetable.modifiedSlots.includes(slot.id) ? 'modified' : ''
                                  }`}
                                >
                                  <div className="crm-slot-time">{getSlotDisplayTime(slot)}</div>
                                  {slot.type !== 'self_study' && (
                                    <div className="crm-slot-subject">{slot.subject}</div>
                                  )}
                                  <div className="crm-slot-type">{getSlotTypeText(slot.type)}</div>
                                </div>
                              ))}
                            </div>
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>
            </>
          )}
        </div>

        {/* 액션 섹션 */}
        {contribution && !loading && (
          <div className="crm-actions">
            <div className="crm-action-buttons">
              <button
                className={`crm-action-btn approve ${selectedAction === 'approve' ? 'active' : ''}`}
                onClick={() => setSelectedAction('approve')}
                disabled={processing}
              >
                승인
              </button>
              <button
                className={`crm-action-btn reject ${selectedAction === 'reject' ? 'active' : ''}`}
                onClick={() => setSelectedAction('reject')}
                disabled={processing}
              >
                거부
              </button>
            </div>

            {selectedAction === 'reject' && (
              <div className="crm-rejection-section">
                <h4>거부 사유</h4>
                <div className="crm-rejection-templates">
                  {rejectionReasonTemplates.map(template => (
                    <label key={template.id} className="crm-template-option">
                      <input
                        type="radio"
                        name="rejectionTemplate"
                        value={template.id}
                        checked={selectedTemplate === template.id}
                        onChange={() => handleTemplateSelect(template.id)}
                      />
                      <span>{template.text}</span>
                    </label>
                  ))}
                </div>

                {selectedTemplate === 'custom' && (
                  <textarea
                    className="crm-custom-reason"
                    placeholder="거부 사유를 입력해주세요..."
                    value={customRejectionReason}
                    onChange={(e) => handleCustomReasonChange(e.target.value)}
                  />
                )}
              </div>
            )}

            <div className="crm-submit-section">
              <button
                className="crm-submit-btn"
                onClick={handleSubmit}
                disabled={
                  loading || 
                  !contribution || 
                  !contribution.id || 
                  !selectedAction || 
                  processing || 
                  (selectedAction === 'reject' && !rejectionReason.trim())
                }
              >
                {loading 
                  ? '데이터 로딩 중...' 
                  : processing 
                    ? '처리 중...' 
                    : `${selectedAction === 'approve' ? '승인' : '거부'} 처리`
                }
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default ContributionReviewModal;